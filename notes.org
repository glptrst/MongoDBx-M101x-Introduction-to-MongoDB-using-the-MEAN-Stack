#+TITLE: Introduction to MongoDB using the MEAN Stack

* Introduction to MongoDB and NodeJS
** Starting a standalone mongod and connecting with shell
    Install mongodb (I shall use dnf on Fedora).
    
    Create the dir ~/data/db
    
    Start mongod with:
    $ mongod --dbpath ~/data/db
    
    In another shell you can start the mongo shell you allows you to
    do basic experimentation with MongoDB:
    $ mongo

    MongoDB stores object as BSON, which is a strict superset of JSON.
    
    Insert a single document with just one key, hello, and one value, world:
    > db.test.insert({ hello: "world"});

    MongoDB stores document in separate collections. Each collection
    belongs to a database, and collection names are unique within a
    single database. Typing db you can see the current database.  In
    this case we have told MongoDB to insert the document in the
    collection named 'test'.
    
    Then we can query it back:
    > db.test.findOne({ hello: "world"});

    In this case we have told MongoDB to search for document in the
    collection named 'test'.

*** quiz
     In order to find all documents in the 'movies' collection for
     which the 'leadActor' key equals "Arnold Schwarzenegger", which
     of the following commands would you execute in the mongo shell?
     
     1) db.exec('SELECT * FROM movies WHERE leadActor="Arnold
        Schwarzenegger"')

     2) db.movies.find({ leadActor: 'Arnold Schwarzenegger' })

     3) db.movies.insert({ leadActor: 'Arnold Schwarzenegger' })

     4) db.sample.find({ leadActor: 'Arnold Schwarzenegger' })

	
     Answer: 2.
** package.json: installing dependencies with npm
    Install NodeJS. NodeJS comes with npm included.

    With 
    $ node -v
    and 
    $ npm -v 
    you can check the versions.
    
    When starting a new NodeJS application, the first thing you want
    to do is create a package dot json file.  Package dot json describes
    your app's meta data, including its name, the version, the author, and
    any the npm packages that it depends on.

    For this course, you will primarily be concerned with package dot
    json as a way to declare which packages your app depends on.
    
    Let's create a package dot json that depends on Underscore.
    Create a file name 'package.json' with this content:
    {
      "dependencies": {
        "underscore" "1.5.2"
      }
    }
    
    To install the dependencies, run:
    $ npm install

    You should see now a node_modules directory in your current
    working directory. If you look in the node_modules directory you
    should see a directory named underscore. This is where the
    underscore package lives.

    You can now write a simple NodeJS program called 'index.js' that
    includes underscore, suing NodeJS' built-in require function
    (Underscore has a simple .each function that executes a function
    for every element in an array):

#+BEGIN_SRC javascript

    var _ = require('underscore');

    _.each([1,2,3], function(v){
      console.log(v);
    });

#+END_SRC
    
    You can now run the program with:
    $ node index.js

    Note that each NodeJS project has its own node underscore modules
    directory where npm installs packages.

    In general it is a good choice to not track node modules with source
    control (unless you really know what you are doing).
*** quiz
     The npm install command downloads npm modules into which
     directory?
     
     1) /usr/local/nodepath
       
     2) /etc/node

     3) ./node_modules

     4) ./.npm

	
     Answer: 1.
	 
** Connecting to mongodb with NodeJS
   The MongoDB NPM package is the officially supported MongoDB node.js
   driver.  The driver lets you write node.js code to talk to MongoDB.
   In this course you'll primarily use Mongoose to interface with
   MongoDB. Mongoose is an object document mapper, or ODM for short,
   that provides functionality like schema validation on top of the
   MongoDB node.js driver. However, since Mongoose is a layer on top
   of the MongoDB driver, and uses the driver to talk to the MongoDB
   server MongoD, it helps to start with a low level driver before
   using the high level tools.

   Let's write our first MongoDB query in node.js.
   
   The first step is to add a dependency on MongoDB version
   2.0.35 to your package.json.

   {
     "dependencies": {
       "mongodb": "2.0.35"
     }
   }

   (We could have written "~2.0" to get the latest 2.0 release)

   Now that you've added the MongoDB driver to your package.json,
   you're ready to run your first query from node.js. 

   'index.js':

#+BEGIN_SRC javascript

      var mongodb = require('mongodb');
       
      var uri = 'mongodb://localhost:27017/example';

      /*
      This MongoClient helper is what you will use to create a connection
      to MongoDB. This MongoClient.connect function takes a MongoDB
      connection string, which is a URI that tells the driver which MongoD
      to connect to. And in this case the URI is MongoDB://localhost port
      27017, and the example database. In other words, this translates to
      connect to the MongoDB running on localhost port 27017, and use the
      example database. The MongoClient.connect function also takes a
      callback function. The callback function gets called when either an
      error occurred, or the driver successfully connected. The callback
      function takes two parameters. A potentially null error and a
      potentially null db handle. In this simple example, if an error
      occurs, we just log it and exit.
      */
      mongodb.MongoClient.connect(uri, function(error, db) {
         if (error) {
           console.log(error);
           process.exit(1);
         }
         /*
         Once the program has a db handle, it can then access the sample
         collection using the db.collection collection function. With a
         collection you can use the insert function to insert a document much
         like how you did in the shell.
         */     
         db.collection('sample').insert({ x: 1 }, function(error, result) {
           if (error) {
             console.log(error);
             process.exit(1);
           }
           /*
           Query for a document is slightly trickier. If you pass the call back
           to the driver's find function, you'll get back a cursor rather than a
           set of documents. In the context of MongoDB, a cursor is an object
           that you could call next on to get the next document. However, in
           order to make things easier for users who don't need fine grained
           control over the cursor, the driver has this nice chainable toArray
           function that exhausts the cursor for you and returns an array of
           documents in the call back. And once you run this program, you should
           see that MongoDB successfully inserted a document, and then query to
           back.
           */
           db.collection('sample').find().toArray(function(error, docs) {
             if (error) {
               console.log(error);
               process.exit(1);
             }
       
             console.log('Found docs:');
             docs.forEach(function(doc) {
               console.log(JSON.stringify(doc));
             });
             process.exit(0);
           });
         });
       });

#+END_SRC
*** quiz
    Consider the following nodejs code:

    #+BEGIN_QUOTE javascript
    db.collection('sample').find(function(error, x) {
    });
    #+END_QUOTE
    
    Assuming that the find succeeds, the x variable is a(n):

    1) array of documents

    2) cursor

    3) binary heap

       
    Answer: 2.
** Inserts and queries using the node.js driver
   As you saw in the 'connecting to MongoDB with Node.js' lesson, the
   Node.js MongoDB driver enables you to store JSON documents in
   MongoDB and query for these objects. For the purposes of this
   course, you should think of MongoDB as something that stores
   arbitrary JavaScript objects and enables you to run queries to find
   JavaScript objects that match a certain criteria. Again, in this
   course, such objects will be called JSON documents.

   With that in mind, let's take a closer look at how you can use the
   MongoDB Node.js driver to write documents to MongoDB, and also how
   to query MongoDB to retrieve documents your application requires.

   'crud-example.js':

   #+BEGIN_SRC javascript
     var mongodb = require('mongodb');

     var uri = 'mongodb://localhost:27017/example';
     /*
     Again, the first thing this program does is connect to MongoDB using
     this connect function. You pass the connection function a connection
     string and a callback function. For now all you need to know is
     callbacks are functions you provide to the Node.js driver to specify
     what to do once a given operation completes. Once, again the .connect
     function does not return a handle to a MongoDB connection. Instead,
     you need to pass a callback function that the MongoDB driver executes
     when your MongoDB handle is ready. The callback takes two parameters:
     an error and a db handle. If the operation fails, the callback gets an
     error as the first argument. If the operation succeeds, the callback
     gets null as the first argument and the result of the operation as the
     second argument.
     ,*/
     mongodb.MongoClient.connect(uri, function(){
       /*
       In the case of this code, if the callback gets an error, that means
       that the driver cannot connect to MongoDB.
       ,*/
       if (error) {
         console.log(error);
         process.exit(1);
       }

       /*
       Now, if error is null, that means there was no error and you now
       have a db handle that you can use to interact with MongoDB.  So with
       this db handle, you can now insert a JSON object into a MongoDB
       collection.
       ,*/
       var doc = {
         title: 'Jaws',
         year: 1975,
         director: 'Steven Spielberg',
         rating: 'PG'
       }
       /*
       So this code right here inserts a document representing the movie
       entitled Jaws into the collection named movies. This .collection
       function gives you a handle to an individual MongoDB
       collection. Note that in order to identify the collection that you
       need, you specify it by name with a string argument to this
       .collection function. Now, with this .insert call, you also need to
       pass a callback.  This callback will get called when the insert
       operation completes and will report any errors that occurred in
       inserting the document.
       ,*/
       db.collection('movies').insert(doc, function(error, result){
         if (error) {
           console.log(error);
           process.exit(1);
         }
         /* 
         Once you insert a document, you can then execute a query to get
         that document back. The find function is how you execute a query
         with MongoDB. If you use the Node.js driver directly, you also
         need to chain find together with this .toArray function. You do
         this so that you can work with an array of documents rather than
         iterate through a cursor, which is what you'd have if you did not
         use this .toArray function. Again, you also need to pass a
         callback to the .toArray function. The first argument the callback
         gets is an error if the operation fails. If not, the value of the
         error parameter will be null and the second parameter, docs, will
         contain an array of documents that match the query. So then you
         can iterate through all of the documents and print them to the
         screen. Once again, the return value of this .toArray function
         does not contain the documents. You need to get the array of
         documents from the second parameter to the callback.
         ,*/
         db.collection('movies').find().toArray(function (error, docs){
           if (error) {
             console.log(error);
             process.exit(1);
           }

           console.log('Found docs:');
           docs.forEach(function(doc){
             console.log(JSON.stringify(doc));
           });
           process.exit(0);
         });
       });
     });
   #+END_SRC
   
   
